plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'api'
version = '0.0.1-SNAPSHOT'

ext {
	set('springCloudVersion', "2025.0.0")
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

dependencies {
	implementation project(':buyhood-global-core:buyhood-global-config')
	implementation project(':buyhood-category:buyhood-product-category')
	implementation project(':buyhood-category:buyhood-store-category')
	implementation project(':buyhood-order')
	
	// spring validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	
	
	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	
	// h2 database
	runtimeOnly 'com.h2database:h2'
	
	// mysql driver
	runtimeOnly 'com.mysql:mysql-connector-j'
	
	// etc
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	
	// portone
	implementation 'com.github.iamport:iamport-rest-client-java:0.2.23'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	
	// QR Code - zxing
	implementation group: 'com.google.zxing', name: 'javase', version: '3.5.0'
	implementation group: 'com.google.zxing', name: 'core', version: '3.5.0'
	
	// retry
	implementation 'org.springframework.retry:spring-retry'
	
}

subprojects {
	group 'api'
	version '0.0.1-SNAPSHOT'
	sourceCompatibility = '21'
	
	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	
	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}
	
	dependencies {
		
		
		// lombok
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
		
		// etc
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'org.springframework.security:spring-security-test'
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	}
	
	repositories {
		mavenCentral()
	}
	
	tasks.withType(org.gradle.api.tasks.testing.Test) {
		useJUnitPlatform()
		
		if (System.getenv("CI") == "true") {
			systemProperty "spring.profiles.active", "ci"
		}
		// 로컬에서는 아무 프로파일도 강제하지 않으므로 application.properties(H2) 사용
	}
}

tasks.withType(org.gradle.api.tasks.testing.Test) {
	useJUnitPlatform()
	
	if (System.getenv("CI") == "true") {
		systemProperty "spring.profiles.active", "ci"
	}
	// 로컬에서는 아무 프로파일도 강제하지 않으므로 application.properties(H2) 사용
}
